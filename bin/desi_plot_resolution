#!/usr/bin/env python

import numpy as np
import sys,os
import argparse
import string
import matplotlib.pyplot as plt

def readpsf(filename) :
    try :
        psftype=pyfits.open(filename)[0].header["PSFTYPE"]
    except KeyError :
        psftype=""
    print("PSF Type=",psftype)
    if psftype=="GAUSS-HERMITE" :
        return specter.psf.GaussHermitePSF(filename)
    elif psftype=="SPOTGRID" :
        return specter.psf.SpotGridPSF(filename)


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
description='''Measure the resolution of each fiber as a function of wavelength and save it in an ASCII file.
''')
parser.add_argument('-i','--input', type = str, default = None, required = True, help = 'resolution ASCII files',nargs='*')
parser.add_argument('-z','--zemax', type = str, default = None, required = False, help = 'zemax resolution ASCII files',nargs='*')
parser.add_argument('--labels', type = str, default = None, required = False, nargs='*')
parser.add_argument('--colors', type = str, default = None, required = False, nargs='*')
parser.add_argument('--mean',action='store_true')
parser.add_argument('--only-mean',action='store_true')
parser.add_argument('--legend',action='store_true')
parser.add_argument('--title',type = str, default = None, required = False, help="figure title")
parser.add_argument('-o','--output',type = str, default = None, required = False, help="filename to save figure as png")


args = parser.parse_args()

fig = plt.figure("resolution")
if args.title:
    plt.subplot(1,1,1,title=args.title)
else :
    plt.subplot(1,1,1)

labels=[]
if args.labels is not None and len(args.labels)==len(args.input) :
    labels = args.labels
else :
    tmp=["BLUE","RED","NIR"]
    for i,filename in enumerate(args.input) :
        labels.append(tmp[i%3])
    #for filename in args.input :
    #    labels.append(os.path.basename(filename))

colors=[]
if args.colors is not None and len(args.colors)==len(args.input) :
    colors = args.colors
else :
    tmp=["blue","red","brown"]
    for i,filename in enumerate(args.input) :
        colors.append(tmp[i%3])
    

        
for filename,label,color in zip(args.input,labels,colors) :
    tmp=np.loadtxt(filename)
    nfibers=tmp.shape[1]-1
    wave=tmp[:,0]
    if args.mean :
        mres=np.mean(tmp[:,1:],axis=1)
        rms=np.std(tmp[:,1:],axis=1)
        maxres=np.max(tmp[:,1:],axis=1)
        minres=np.min(tmp[:,1:],axis=1)
        if not args.only_mean:
            plt.fill_between(wave,minres,maxres,color=color,alpha=0.4)
        plt.plot(wave,mres,label=label,color=color)
        
    else :
        for fiber in range(nfibers) :
            res=tmp[:,fiber+1]
            plt.plot(wave,res)

if args.zemax is not None :
    first=True
    for filename in args.zemax :
        tmp=np.loadtxt(filename)
        nfibers=tmp.shape[1]-1
        wave=tmp[:,0]
        mres=np.mean(tmp[:,1:],axis=1)
        if first : 
            label = "ZEMAX model"
            first=False
        else :
            label = None
        plt.plot(wave,mres,"--",label=label,color="black")

plt.plot([3600,5550,5550,6560,6560,9800],[1500,1500,3000,3000,4000,4000],":",lw=2,color="gray",label="requirement")
plt.ylim([1000,6000])

plt.grid()
if args.legend :
    plt.legend(loc="upper left",fontsize="small")
plt.xlabel(r"$\mathrm{Wavelength} \, \lambda \, [\mathrm{\AA{}}]$")
plt.ylabel(r"Spectral Resolution $R=\lambda/FWHM_{\lambda}$")

if args.output :
    fig.savefig(args.output)
    print("wrote figure",args.output)

plt.show()

