#!/usr/bin/env python

import argparse
import sys
import astropy.io.fits as pyfits
import numpy as np
import matplotlib.pyplot as plt

from teststand.boxcar_extraction   import boxcar
from teststand.resample            import resample_to_same_wavelength_grid
from teststand.graph_tools         import plot_graph,parse_fibers
from desiutil.log                  import get_logger

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-p','--psf', type = str, default = None, required = True,
                    help = 'path of psf fits file to get wavelength from')
parser.add_argument('-i','--image', type = str, default = None, required = True,
                    help = 'path of image fits file')
parser.add_argument('-o','--outframe', type = str, default = None, required = False,
                    help = 'path of output frame file')
parser.add_argument('--fibers', type=str, default = None, required = False,
                    help = 'defines from_to which fiber to work on. (ex: --fibers=50:60,4 means that only fibers 4, and fibers from 50 to 60 (excluded) will be extracted)')
parser.add_argument('--show', action='store_true',
                    help = 'plot result')
parser.add_argument('-r','--resample', action='store_true',
                    help = 'resample to save wavelength grid')
parser.add_argument('--width', type=int, default=9, required=False,
                    help = 'extraction line width')
parser.add_argument('--sb', action='store_true',
                    help = 'remove side bands of same width (only applicable for sparse fiber data for fine linearity studies')

log         = get_logger()
args        = parser.parse_args()

if args.outframe is None and not args.show :
    print("you don't want to plot or save the spectra, so there's no point extracting the data :-)")
    print("try %s --help"%(sys.argv[0]))
    sys.exit(1)

fibers = parse_fibers(args.fibers)
    
psf         = pyfits.open(args.psf)
image_file  = pyfits.open(args.image)

spectra, ivar, wave = boxcar(psf, image_file, fibers=fibers ,width=args.width, side_bands=args.sb)

if fibers is None :
    fibers = spectra.shape[0]

if args.resample :
    log.info("Starting resampling...")
    spectra, ivar, wave = resample_to_same_wavelength_grid(spectra, ivar, wave)
    log.info("Data resampled.")

frame = pyfits.HDUList([pyfits.PrimaryHDU(spectra),
                        pyfits.ImageHDU(ivar,name="IVAR"),
                        pyfits.ImageHDU(wave,name="WAVELENGTH")])
frame[0].header["EXTNAME"]="FLUX"

# add content of preproc header
blacklist = ["EXTEND","SIMPLE","NAXIS1","NAXIS2","CHECKSUM","DATASUM","XTENSION","EXTNAME","COMMENT"]
image_header = image_file[0].header
for key in image_header:
    if ( key not in blacklist ) and ( key not in frame[0].header ) :        
        frame[0].header[key] = image_header[key] 


if args.outframe is not None :
    frame.writeto(args.outframe,clobber=True)
    log.info("wrote %s"%args.outframe)

if args.show :
    plot_graph(frame,np.arange(spectra.shape[0]))
    plt.show()

log.info("Script done")
