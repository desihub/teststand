#!/usr/bin/env python

import argparse
import sys
import astropy.io.fits as pyfits

import numpy as np
import matplotlib.pyplot as plt

from desispec.qproc.qextract import qproc_boxcar_extraction
from desispec.qproc.util import parse_fibers
from desispec.io.xytraceset import read_xytraceset
from desispec.calibfinder import CalibFinder

from desiutil.log                  import get_logger
from desispec.io import read_image



parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-p','--psf', type = str, default = None, required = False,
                    help = 'path of psf fits file (default from DESI_SPECTRO_CALIB)')
parser.add_argument('-i','--image', type = str, default = None, required = True,
                    help = 'path of image fits file')
parser.add_argument('-o','--outfile', type = str, default = None, required = False,
                    help = 'path of output frame file')
parser.add_argument('--fibers', type=str, default = None, required = False,
                    help = 'defines from_to which fiber to work on. (ex: --fibers=50:60,4 means that only fibers 4, and fibers from 50 to 60 (excluded) will be extracted)')
parser.add_argument('--show', action='store_true',
                    help = 'plot result')
parser.add_argument('--width', type=int, default=3, required=False,
                    help = 'extraction band width')
parser.add_argument('--dist', type=float, default=7., required=False,
                    help = 'distance of band center to fiber trace')

log         = get_logger()
args        = parser.parse_args()

image   = read_image(args.image)
cfinder = None

if args.psf is None :
    if cfinder is None :
        cfinder = CalibFinder([image.meta])
    args.psf = cfinder.findfile("PSF")
    log.info(" Using PSF {}".format(args.psf))
tset    = read_xytraceset(args.psf)

fibermap = None
qframe  = qproc_boxcar_extraction(tset,image,width=7, fibermap=fibermap)

# alter tset here ....
#qframe_left
#qframe_right
tset.x_vs_wave_traceset._coeff[:,0] += args.dist
qframe_right  = qproc_boxcar_extraction(tset,image,width=args.width, fibermap=fibermap)
tset.x_vs_wave_traceset._coeff[:,0] -= 2*args.dist
qframe_left  = qproc_boxcar_extraction(tset,image,width=args.width, fibermap=fibermap)
tset.x_vs_wave_traceset._coeff[:,0] += args.dist


bins=np.linspace(np.min(qframe.wave),np.max(qframe.wave),10)

a=np.zeros(bins.size-1)
b=np.zeros(bins.size-1)

fibers = parse_fibers(args.fibers)
if fibers is None :
    fibers = qframe.fibermap["FIBER"]
for fiber in fibers :
    i=np.where(qframe.fibermap["FIBER"]==fiber)[0]
    tmp,junk =  np.histogram(qframe.wave[i],bins=bins,weights=qframe_right.ivar[i]*qframe.flux[i]**2)
    a += tmp
    tmp,junk =  np.histogram(qframe.wave[i],bins=bins,weights=qframe_right.ivar[i]*qframe.flux[i]*qframe_right.flux[i])
    b += tmp
    tmp,junk =  np.histogram(qframe.wave[i],bins=bins,weights=qframe_left.ivar[i]*qframe.flux[i]**2)
    a += tmp
    tmp,junk =  np.histogram(qframe.wave[i],bins=bins,weights=qframe_left.ivar[i]*qframe.flux[i]*qframe_left.flux[i])
    b += tmp
    
ii=np.where(a>0)[0]
frac=np.zeros(ii.size)
err=np.zeros(ii.size)
frac = b[ii]/a[ii]
err  = 1./np.sqrt(a[ii])
wave = (bins[ii+1]+bins[ii])/2.

i=np.where(err<0.001)[0]

meanfrac=np.sum(frac/err**2)/np.sum(1/err**2)
print("mean cross-talk=",meanfrac)

tmp=np.array([wave[i],frac[i],err[i]]).T
if args.outfile is not None :
    np.savetxt(args.outfile,tmp,header="wavelength crosstalk error")
    log.info("wrote {}".format(args.outfile))

if args.show :
    plt.errorbar(wave[i],frac[i],err[i],fmt="o")
    plt.xlabel("wavelength [A]")
    plt.ylabel("crosstalk")
    plt.grid()
    plt.show()



