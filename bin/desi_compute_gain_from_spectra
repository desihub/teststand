#!/usr/bin/env python


import sys,string
import numpy as np
#import astropy.io.fits as pyfits
import argparse
import matplotlib.pyplot as plt
import logging
from desiutil.log import get_logger
import desispec.maskbits as maskbits
#from desispec.io import read_image
from desispec.io.xytraceset import read_xytraceset
from desispec.calibfinder import CalibFinder
from desispec.qproc.io import read_qframe,write_qframe
#from desispec.qproc.qextract import qproc_boxcar_extraction
from desispec.preproc import _parse_sec_keyword

def clipped_var(mx,x2) :
    
    nsig=5.    
    ovar=0.001
    
    # start with NMAD , less sensitive to outliers
    var = ( 1.4826*np.median( np.abs(np.sqrt(x2))) )**2
    #print("ini",var,0)
    for loop in range(20) :
        ok=(x2<nsig**2*var)
        var=np.mean(x2[ok])
        #print(loop,var,x2.size-ok.size)
        if np.abs(var/ovar-1)<0.0001 :
            break
        ovar=var
    return np.mean(mx[ok]),var,ok.size,loop

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
description="Compute the electronic cross-talk coefficient among the amplifiers of a CCD image",
                                 epilog='''
                                 Input is a preprocessed arc lamp image with a sufficient number of bright lines
                                 to evaluate unambiguously the cross-talk.                                 
                                 ''')
parser.add_argument('-i','--infile', type = str, default = None, required = True, nargs="*",
                    help = 'list of input qframe files')
parser.add_argument('-a','--amplifiers', type = str, default = "ABCD", required = False, 
                    help = 'list of amplifiers to study, like AB')
parser.add_argument('--plot',action="store_true",help="show the fit")
#parser.add_argument('--nsig',type=float,default=5.,required=False, help="n sigma clipping to variance measurement (use with care)")
parser.add_argument('--bin_size',type=float,default=400,required=False, help="flux bin size (cannot be too small to avoid biases)")
#parser.add_argument('--minflux',type=float,default=-2000.,required=False, help="minflux")
#parser.add_argument('--maxflux-fit',type=float,default=20000.,required=False, help="maxflux for fit")
#parser.add_argument('--maxflux-show',type=float,default=30000.,required=False, help="maxflux for display of PTC")
parser.add_argument('--psf',type=str,required=False,default=None,help="needed to get the trace locations")
parser.add_argument('--deg',type=int,required=False,default=1,help="degree of polynomial fit (to absorb non-linearities)")
#parser.add_argument('--nmc',type=int,required=False,default=100,help="number of Monte Carlo realizations to evaluate stat. uncertainty and bias")
#parser.add_argument('--debug',action="store_true")
parser.add_argument('--width',type=int,required=False,default=5,help="width in pixels of trace")
#parser.add_argument('--nocalib',action="store_true",help="do not recalibrate the exposures")
parser.add_argument('--margin',type=int,required=False,default=100,help="remove first and last rows of amp")
#parser.add_argument('--threshold',type=float,required=False,default=0.05,help="max allowed variation of calibration")
parser.add_argument('--max_mean_flux',type=float,required=False,default=200000,help="max flux")
parser.add_argument('--fig',type=str,required=False,default=None,help="save figure")
#parser.add_argument('--perpix',action='store_true',help="per pixel (otherwise per row)")  
parser.add_argument('--noedge',action='store_true',help="exclude first or last two fibers")  
parser.add_argument('-o','--output',type=str,required=False,default=None,help="save mean and variance measurements in fits file")

fit_offset  = True
args        = parser.parse_args()


log = get_logger()

if len(args.infile)<2 :
    log.error("need at least 2 qframes")
    sys.exit(0)
nbins=int(args.max_mean_flux/args.bin_size)

header=None
camera="?"
qframes=dict()
for filename in args.infile :
    qframe=read_qframe(filename)
    header=qframe.meta
    if "CAMERA" in header:
        camera=header["CAMERA"]
    exptime=int(qframe.meta["EXPTIME"])
    if exptime == 0 : continue
    if not exptime in qframes :
        qframes[exptime] = [qframe]
    else :
        qframes[exptime].append(qframe)

for e in qframes.keys() :
    print(e,len(qframes[e]))



# get y range and a list of fibers for each amplifier
if args.psf is None :
    cfinder = CalibFinder([header,])
    args.psf = cfinder.findfile("PSF")
    log.info(" Using PSF {}".format(args.psf))

tset = read_xytraceset(args.psf)
rows=dict()
fibers=dict()
for amp  in args.amplifiers :
    
    log.debug("will study amplifier %s"%amp)
    ii = _parse_sec_keyword(header['CCDSEC%s'%amp])
    ystart=ii[0].start
    ystop=ii[0].stop
    xstart=ii[1].start
    xstop=ii[1].stop
    
    log.debug("amp %s : y in [%d,%d] , x in [%d,%d]"%(amp,ystart,ystop,xstart,xstop))
    if args.margin > 0 :
        # remove first and last rows
        if ystart==0 :
            ystart += args.margin
        else :
            ystop  -= args.margin
        ii=(slice(ystart, ystop, None), slice(xstart, xstop, None))        
        log.debug("excluding %d first and last rows -> slices=%s"%(args.margin,ii))  
    
    tmp=[]
    for f in range(tset.nspec) :
        if args.noedge and f==0 or f==(tset.nspec-1) : continue
        
        x=tset.x_vs_wave_traceset._coeff[f,0] # central x value of fiber
        if x>=xstart and x<xstop : 
            
            # now look if this fiber is isolated
            if f>0 :
                xm = tset.x_vs_wave_traceset._coeff[f-1,0]
                if np.abs(x-xm)<args.width+2 :
                    log.info("fibers {} and {} are too close".format(f-1,f))
                    continue
            if f<tset.nspec-1 :
                xp = tset.x_vs_wave_traceset._coeff[f+1,0]
                if np.abs(x-xp)<args.width+2 :
                    log.info("fibers {} and {} are too close".format(f,f+1))
                    continue
            log.info("Adding fiber {}".format(f))
            tmp.append(f)
    
    fibers[amp]   = np.array(tmp)
    rows[amp]        = np.arange(ystart,ystop)             #  y



for amp  in args.amplifiers :
    
    log.debug("studying amplifier %s"%amp)
    #nfibers=len(fibers[amp])
    
    ax=[] # mean fluxes
    ay=[] # variances for mean fluxes
    an=[] # number of data points in bin
    
    aax=[]
    aay=[]
    aae=[]
    for exptime in qframes.keys() :
        nexp=len(qframes[exptime])
        if nexp<2 : continue
        log.info("studying amplifier %s exptime=%d nexp=%d"%(amp,exptime,nexp))
    
        flux=[]
        for qframe in qframes[exptime] :
            ii=fibers[amp].astype(int)
            dwave=np.gradient(qframe.wave[ii],axis=1)
            flux.append((qframe.flux[ii]*dwave)[:,rows[amp]]) # HAD TO MULTIPLY BACK BY WAVE BIN SIZE !!!!
        flux=np.array(flux)
        
        #  test for definition of gain
        ## flux *= 10. # gain should be 10 times smaller 
        

        if False : 
            # mc to check for biases
            truth = np.mean(flux,axis=0)
            truth *= (truth>0)
            for i in range(flux.shape[0]) :
                flux[i] = truth+np.random.normal(size=truth.shape)*np.sqrt(truth) 
        
        xx  = np.mean(flux,axis=0).ravel()
        yy  = np.mean(flux**2,axis=0).ravel()-xx**2
        yy *= nexp/(nexp-1.) # normalization given the number of measurements
        bins=(xx/args.bin_size).astype(int)
        ok=(bins>=0)&(bins<nbins)
        ubins=np.unique(bins[ok])
        x=[]
        y=[]
        n=[]
        
        for b in ubins :
            ok=np.where((xx>=args.bin_size*b)&(xx<args.bin_size*(b+1)))[0]
            if ok.size<400 : continue
            mean,var,ndata,nloop = clipped_var(xx[ok],yy[ok])
            log.debug("flux=%f var=%f n=%d nloop=%d"%(mean,var,ndata,nloop))            
            x.append(mean)
            y.append(var)
            n.append(ndata)
            ax.append(mean)
            ay.append(var)
            an.append(ndata)
        err=np.sqrt(2./np.array(n))*np.array(y)
        aax.append(x)
        aay.append(y)
        aae.append(err)
        
    ok=(np.array(ay)>0.1) # var
    x=np.array(ax)[ok]
    y=np.array(ay)[ok]
    n=np.array(an)[ok]     
    err=np.sqrt(2./n)*y
    xs=np.mean(x)
    
    w=1./(err**2+1.**2)

    c=np.polyfit(x,y,args.deg)
    pol=np.poly1d(c)
    gain=1./c[-2]
    print("coefficients=",c)
    log.info("{}-{} gain = {:4.3f} e/ADU".format(camera,amp,gain))
    
    

    #chi2=np.sum((y-y0-mypol(x,coef))**2/err**2)
    #ndf=x.size-coef.size
    #gain=1./coef[1]*xs
    
    if args.plot :
        ms=5
        fig=plt.figure("ptc-{}-{}".format(camera,amp))
        plt.subplot(2,1,1)
        #plt.errorbar(x,y,err,fmt="o",ms=ms,color="gray",alpha=0.1)
        for i in range(len(aax)) :
            plt.errorbar(aax[i],aay[i],aae[i],fmt="o")
        tx=np.arange(np.min(x),np.max(x),100) 
        plt.plot(tx,pol(tx),label="gain=%4.3f"%gain)
        plt.ylabel("variance(flux)")
        plt.legend(loc="upper left",title="%s-%s"%(camera,amp))
        plt.subplot(2,1,2)
        lpol=np.poly1d(c[-2:])
        for i in range(len(aax)) :
            plt.errorbar(aax[i],aay[i]-lpol(aax[i]),aae[i],fmt="o")
        plt.plot(tx,pol(tx)-lpol(tx))
        #plt.errorbar(x,y-pol(x),err,fmt="o",ms=ms,color="gray")
        plt.ylabel("variance(flux) - linear fit")
        plt.grid()
        fig.savefig("ptc-%s-%s.png"%(camera,amp))
        
    # end of loop on amplifiers

plt.show()

